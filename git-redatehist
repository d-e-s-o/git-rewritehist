#!/usr/bin/python3

#/***************************************************************************
# *   Copyright (C) 2021-2022 Daniel Mueller (deso@posteo.net)              *
# *                                                                         *
# *   This program is free software: you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation, either version 3 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
# ***************************************************************************/

from argparse import (
  ArgumentParser,
  ArgumentTypeError,
)
from datetime import (
  datetime,
  date,
  timedelta,
)
from os.path import (
  join,
)
from random import (
  choice,
  randint,
)
from subprocess import (
  check_call,
  check_output,
  run,
)
from sys import (
  argv,
  exit,
)
from textwrap import (
  dedent,
)


def isoDate(string):
  """A function parsing a string of form YYYY-MM-DD as a date."""
  try:
    return date.fromisoformat(string)
  except ValueError as e:
    raise ArgumentTypeError(str(e))


def setupArgumentParser():
  """Create and initialize an argument parser, ready for use."""
  parser = ArgumentParser()
  parser.add_argument(
    "commit", action="store", metavar="COMMIT",
    help="SHA-1 of first commit to re-date.",
  )
  parser.add_argument(
    "start_date", action="store", metavar="START-DATE",
    type=isoDate, help="The start date to use.",
  )
  return parser


def randomTime(date):
  """Create a random time on the given date (with constraints)."""
  day = date.weekday()
  # For weekday(), Monday is 0 and Sunday is 6.
  if day in (5, 6):
    hour = randint(7, 23)
  else:
    hour = choice((7, 8, 19, 20, 21, 22, 23))

  minute = randint(0, 59)
  second = randint(0, 59)

  return datetime(date.year, date.month, date.day, hour=hour, minute=minute, second=second)


def createRebaseLog(start_commit, start_date):
  """Create a rebase log as accepted by git-rebase."""
  log = check_output([
    "git",
    "log",
    "--date=iso",
    "--format=format:pick %H %s",
    f"{start_commit}..HEAD"
  ], text=True)

  date = start_date
  rebase_log = []
  for line in reversed(log.splitlines()):
    commit_time = randomTime(date)
    # Note that we need the --reset-author switch here in order to also
    # set the author date.
    command = "".join(dedent(f"""\
      exec if [ "$(git show --format=format:'%as' --no-patch)" != "{date.isoformat()}" ]; then
        GIT_AUTHOR_DATE="{commit_time}"
        GIT_COMMITTER_DATE="{commit_time}"
        GPG_SIGNATURE_TIMESTAMP=$(date --date="{commit_time}" +'%s')
          git commit --no-verify --reset-author --amend --allow-empty --reuse-message=HEAD;
      fi
    """).splitlines())

    rebase_log.append(line)
    rebase_log.append(command)

    date += timedelta(days=1)

  return "\n".join(rebase_log)


def main(args):
  """Redate commit history starting at a certain commit."""
  parser = setupArgumentParser()
  ns = parser.parse_args(argv[1:])

  rebase_log = createRebaseLog(ns.commit, ns.start_date)

  env = {
    "GIT_EDITOR": r"sed -i '1 i\x false'"
  }
  run(["git", "rebase", "--interactive", "--keep-empty", ns.commit], env=env)
  root = check_output(["git", "rev-parse", "--show-toplevel"], text=True).strip()
  todo_log = join(root, ".git", "rebase-merge", "git-rebase-todo")
  with open(todo_log, "w+") as todo:
    todo.write(rebase_log)

  check_call(["git", "rebase", "--edit-todo"])
  check_call(["git", "rebase", "--continue"])
  return 0


if __name__ == "__main__":
  exit(main(argv[1:]))
